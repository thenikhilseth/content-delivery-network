"use strict";
// Copyright 2017 The node-fastify-auto-push Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
}
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
}
Object.defineProperty(exports, "__esModule", { value: true });
const cookie = __importStar(require("cookie"));
const fastify_plugin_1 = __importDefault(require("fastify-plugin"));
const fastify_static_1 = __importDefault(require("fastify-static"));
const autoPush = __importStar(require("h2-auto-push"));
function isHttp2Request(req) {
    return !!req.stream;
}
function isHttp2Response(res) {
    return !!res.stream;
}
const CACHE_COOKIE_KEY = '__ap_cache__';
async function staticServeFn(app, opts) {
    const root = opts.root;
    const prefix = opts.prefix || '/';
    const ap = new autoPush.AutoPush(root, opts.cacheConfig);
    app.register(fastify_static_1.default, opts);
    app.addHook('onRequest', async (req, res) => {
        if (isHttp2Request(req)) {
            const reqPath = req.url;
            const reqStream = req.stream;
            const cookies = cookie.parse(req.headers['cookie'] || '');
            const cacheKey = cookies[CACHE_COOKIE_KEY];
            const { newCacheCookie, pushFn } = await ap.preprocessRequest(reqPath, reqStream, cacheKey);
            // TODO(jinwoo): Consider making this persistent across sessions.
            res.setHeader('set-cookie', cookie.serialize(CACHE_COOKIE_KEY, newCacheCookie, { path: '/' }));
            reqStream.on('pushError', (err) => {
                req.log.error('Error while pushing', err);
            });
            pushFn().then(noop, noop);
        }
    });
    app.addHook('onSend', async (request, reply, payload) => {
        const res = reply.res;
        if (isHttp2Response(res)) {
            const statusCode = res.statusCode;
            const resStream = res.stream;
            const reqPath = request.req.url;
            if (statusCode === 404 && reqPath) {
                ap.recordRequestPath(resStream.session, reqPath, false);
            }
            else if (statusCode < 300 && statusCode >= 200 && reqPath &&
                // Record as a static file only when the path starts with `prefix`.
                reqPath.startsWith(prefix)) {
                ap.recordRequestPath(resStream.session, reqPath, true);
            }
        }
    });
}
function noop() { }
exports.staticServe = fastify_plugin_1.default(staticServeFn);
//# sourceMappingURL=index.js.map